[{"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/index.js":"1","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/App.js":"2","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/reportWebVitals.js":"3","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Editorpage.js":"4","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Home.js":"5","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/Actions.js":"6","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/socket.js":"7","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Client.js":"8","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Editor.js":"9","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Chat.js":"10"},{"size":496,"mtime":1677605455000,"results":"11","hashOfConfig":"12"},{"size":582,"mtime":1677605455000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1677605455000,"results":"14","hashOfConfig":"12"},{"size":4633,"mtime":1677712947095,"results":"15","hashOfConfig":"12"},{"size":2241,"mtime":1677711498831,"results":"16","hashOfConfig":"12"},{"size":210,"mtime":1677605455000,"results":"17","hashOfConfig":"12"},{"size":310,"mtime":1677605455000,"results":"18","hashOfConfig":"12"},{"size":369,"mtime":1677605455000,"results":"19","hashOfConfig":"12"},{"size":4947,"mtime":1677605455000,"results":"20","hashOfConfig":"12"},{"size":2124,"mtime":1677605455000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1073jkm",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/index.js",[],[],"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/App.js",[],[],"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/reportWebVitals.js",[],[],"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Editorpage.js",["55"],[],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport logo from \"../images/output-onlinepngtools.png\";\r\nimport Client from \"./Client\";\r\nimport Editor from \"./Editor\";\r\nimport { useRef } from \"react\";\r\nimport { initSocket } from \"../socket.js\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport ACTIONS from \"../Actions\";\r\nimport { useNavigate, Navigate, useParams } from \"react-router-dom\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst Editorpage = () => {\r\n  const socketRef = useRef(null);\r\n  const codeRef = useRef(null);\r\n  const location = useLocation();\r\n\r\n  const { roomId } = useParams();\r\n  const reactNavigator = useNavigate();\r\n  const [clients, setClients] = useState([]);\r\n\r\n  function handleErrors(e) {\r\n    console.log(\"socket error\", e);\r\n    toast.errror(\"Socket Connection failed , try again later.\");\r\n    reactNavigator(\"/\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      //Connection with Socket io\r\n      socketRef.current = await initSocket();\r\n\r\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\r\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\r\n\r\n      socketRef.current.emit(ACTIONS.JOIN, {\r\n        roomId,\r\n        username: location.state?.username,\r\n      });\r\n      console.log(clients);\r\n\r\n      //For joining\r\n      socketRef.current.on(\r\n        ACTIONS.JOINED,\r\n        ({ clients, username, socketId }) => {\r\n          if (username !== location.state?.username) {\r\n            toast.success(`${username} joined the room.`);\r\n            console.log(`${username} joined`);\r\n          }\r\n          setClients(clients);\r\n          socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n            code: codeRef.current,\r\n            socketId,\r\n          });\r\n        }\r\n      );\r\n\r\n      //For disconnection\r\n      socketRef.current.on(ACTIONS.DISCONNECTED, ({ socketId, username }) => {\r\n        toast.success(`${username} left the room.`);\r\n        setClients((prev) => {\r\n          return prev.filter((client) => client.socketId !== socketId);\r\n        });\r\n      });\r\n    };\r\n    init();\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n      socketRef.current.off(ACTIONS.JOINED);\r\n      socketRef.current.off(ACTIONS.DISCONNECTED);\r\n    };\r\n  }, []);\r\n\r\n  if (!location.state) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n  const copyRoomId = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(roomId);\r\n      toast.success(\"Room Id has been copied to clipboard\");\r\n    } catch (err) {\r\n      toast.error(\"Could not copy Room Id\");\r\n      console.log(err);\r\n    }\r\n  };\r\n  const leaveRoom = () => {\r\n    reactNavigator(\"/\");\r\n  };\r\n  return (\r\n    <div className=\"minWrap\">\r\n      <div className=\"aside\">\r\n        <div className=\"asideInner\">\r\n          <div className=\"logo\">\r\n            <img\r\n              className=\"logoImage\"\r\n              style={{ height: \"40px\", width: \"40px\" }}\r\n              src={logo}\r\n              alt=\"logo\"\r\n            />\r\n            <h3\r\n              style={{\r\n                color: \"rgb(231 11 56 / 78%)\",\r\n                paddingTop: \"8px\",\r\n                paddingLeft: \"10px\",\r\n                fontWeight: \"800\",\r\n              }}\r\n            >\r\n              Code Compiler\r\n            </h3>\r\n          </div>\r\n          <h5 style={{ paddingTop: \"1.5rem\", paddingBottom: \"0.8rem\" }}>\r\n            Connected\r\n          </h5>\r\n          <div className=\"clientsList\">\r\n            {clients.map((client) => (\r\n              <Client key={client.socketId} username={client.username} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <Button\r\n          className=\"btn-copy-btn\"\r\n          style={{\r\n            backgroundColor: \"#4d67c3\",\r\n            border: \"none\",\r\n            outline: \"none\",\r\n          }}\r\n          onClick={copyRoomId}\r\n        >\r\n          COPY ROOM ID\r\n        </Button>\r\n        <Button\r\n          className=\"btn-leave-btn\"\r\n          style={{ backgroundColor: \"rgb(231 11 56 / 78%)\", border: \"none\" }}\r\n          onClick={leaveRoom}\r\n        >\r\n          LEAVE\r\n        </Button>\r\n      </div>\r\n      <div className=\"editorWrap\">\r\n        <div className=\"middleTab\">\r\n          <Editor\r\n            socketRef={socketRef}\r\n            roomId={roomId}\r\n            onCodeChange={(code) => {\r\n              codeRef.current = code;\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"rightTab\">\r\n          <Chat />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editorpage;\r\n","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Home.js",["56"],[],"import React, { useState } from \"react\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const createNewRoom = (e) => {\r\n    e.preventDefault();\r\n    const id = uuidV4();\r\n    setRoomId(id);\r\n    toast.success(\"Created a new room\");\r\n  };\r\n\r\n  const joinRoom = () => {\r\n    if (!roomId || !username) {\r\n      toast.error(\"ROOM ID & username is required\");\r\n      return;\r\n    }\r\n\r\n    // Redirect\r\n    navigate(`/editor/${roomId}`, {\r\n      state: {\r\n        username,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleInputEnter = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      joinRoom();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"homePageWrapper\">\r\n      <div className=\"formWrapper\">\r\n        <img\r\n          className=\"homePageLogo\"\r\n          src=\"/code-sync.png\"\r\n          alt=\"code-sync-logo\"\r\n        />\r\n        <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\r\n        <div className=\"inputGroup\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"inputBox\"\r\n            placeholder=\"ROOM ID\"\r\n            onChange={(e) => setRoomId(e.target.value)}\r\n            value={roomId}\r\n            onKeyUp={handleInputEnter}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            className=\"inputBox\"\r\n            placeholder=\"USERNAME\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            value={username}\r\n            onKeyUp={handleInputEnter}\r\n          />\r\n          <button className=\"btn joinBtn\" onClick={joinRoom}>\r\n            Join\r\n          </button>\r\n          <span className=\"createInfo\">\r\n            If you don't have an invite then create &nbsp;\r\n            <a onClick={createNewRoom} href=\"\" className=\"createNewBtn\">\r\n              new room\r\n            </a>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <h4>\r\n          Built &nbsp; by &nbsp;\r\n          <a href=\"https://github.com/codersgyan\">Abhishek Srinivasan</a>\r\n        </h4>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/Actions.js",[],[],"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/socket.js",[],[],"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Client.js",[],[],"/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Editor.js",["57","58","59","60"],[],"import React, { useEffect, useRef, useState } from 'react';\r\nimport Codemirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript.js';\r\nimport 'codemirror/addon/edit/closetag';\r\nimport 'codemirror/addon/edit/closebrackets';\r\nimport ACTIONS from '../Actions';\r\nimport axios from 'axios';\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\n\r\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\r\n    const editorRef = useRef(null);\r\n    const [runcode, setRuncode] = useState('');\r\n    const [result, setResult] = useState('');\r\n    const [language, setLanguage] = useState('python');\r\n    const [extension, setExtension] = useState('py')\r\n\r\n    //Compiling code\r\n    const run = () => {\r\n\r\n        axios\r\n            .post(`http://localhost:5000/${language}`, { runcode })\r\n            .then(\r\n                ({ data }) => {\r\n                    setResult(data);\r\n                }\r\n            );\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function init() {\r\n            editorRef.current = Codemirror.fromTextArea(\r\n                document.getElementById('realtimeEditor'),\r\n                {\r\n                    mode: { name: 'javascript', json: true },\r\n                    theme: 'dracula',\r\n                    autoCloseTags: true,\r\n                    autoCloseBrackets: true,\r\n                    lineNumbers: true,\r\n                }\r\n\r\n            );\r\n\r\n            editorRef.current.on('change', (instance, changes) => {\r\n                const { origin } = changes;\r\n                const code = instance.getValue();\r\n                onCodeChange(code);\r\n                setRuncode(code);\r\n\r\n                if (origin !== 'setValue') {\r\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\r\n                        roomId,\r\n                        code,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        init();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (socketRef.current) {\r\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\r\n                if (code !== null) {\r\n                    editorRef.current.setValue(code);\r\n                }\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\r\n        };\r\n    }, [socketRef.current]);\r\n\r\n    //Settinf language and extension for various code languages\r\n    const python = () => {\r\n        setLanguage('python');\r\n        setExtension('py');\r\n    };\r\n    const node = () => {\r\n        setLanguage('node');\r\n        setExtension('js');\r\n    }\r\n    const c = () => {\r\n        setLanguage('c');\r\n        setExtension('c');\r\n    }\r\n    const cpp = () => {\r\n        setLanguage('cpp');\r\n        setExtension('cpp');\r\n    }\r\n    const java = () => {\r\n        setLanguage('java');\r\n        setExtension('java');\r\n    }\r\n\r\n    //Download code file\r\n    const downloadTxtFile = () => {\r\n        const element = document.createElement(\"a\");\r\n        console.log(runcode);\r\n        const file = new Blob([`${runcode}`], {\r\n            type: \"text/plain\"\r\n        });\r\n\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = `Code-Collab.${extension}`;\r\n        document.body.appendChild(element);\r\n        element.click();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <textarea id=\"realtimeEditor\" ></textarea>\r\n            <div className='editor-buttons'>\r\n                <Button className='all-btn' style={{ marginRight: '1rem', backgroundColor: 'rgb(77, 103, 195)', border: 'none' }} onClick={downloadTxtFile}>Save</Button>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle className='all-btn' style={{ backgroundColor: '#4d67c3', border: 'none', borderRadius: '7px' }} id=\"dropdown-basic\">\r\n                        {language}\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={node}>javascript</Dropdown.Item>\r\n                        <Dropdown.Item onClick={python}>python</Dropdown.Item>\r\n                        <Dropdown.Item onClick={c}>c</Dropdown.Item>\r\n                        <Dropdown.Item onClick={cpp}>cpp</Dropdown.Item>\r\n                        <Dropdown.Item onClick={java}>java</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Button onClick={run} className='runbutton' style={{ backgroundColor: 'rgb(231 11 56 / 78%)', border: 'none' }}>Run</Button>\r\n            </div>\r\n            <h5 style={{ fontFamily: '\\'Baloo Bhaijaan 2\\' , cursive', color: 'white', margin: '1rem' }}>OUTPUT</h5>\r\n            <p style={{ color: 'white', fontFamily: '\\'Baloo Bhaijaan 2\\' , cursive', color: 'white', margin: '4px', fontWeight: '200', paddingLeft: '1rem' }}>{result}</p>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default Editor;","/home/abhshk/Desktop/Code-Collab-main/code-collab/src/components/Chat.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":74,"column":6,"nodeType":"63","endLine":74,"endColumn":8,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":68,"column":13,"nodeType":"67","endLine":68,"endColumn":73},{"ruleId":"61","severity":1,"message":"68","line":62,"column":8,"nodeType":"63","endLine":62,"endColumn":10,"suggestions":"69"},{"ruleId":"61","severity":1,"message":"70","line":75,"column":23,"nodeType":"71","endLine":75,"endColumn":30},{"ruleId":"61","severity":1,"message":"72","line":77,"column":8,"nodeType":"63","endLine":77,"endColumn":27,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":136,"column":87,"nodeType":"76","messageId":"77","endLine":136,"endColumn":92},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clients', 'handleErrors', 'location.state?.username', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["78"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["79"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["80"],"no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [clients, handleErrors, location.state?.username, roomId]",{"range":"87","text":"88"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"89","text":"90"},"Update the dependencies array to be: [socketRef]",{"range":"91","text":"92"},[2371,2373],"[clients, handleErrors, location.state?.username, roomId]",[2035,2037],"[onCodeChange, roomId, socketRef]",[2415,2434],"[socketRef]"]
{
  "version": 3,
  "names": [
    "lineNumbers",
    "highlightActiveLineGutter",
    "highlightSpecialChars",
    "drawSelection",
    "dropCursor",
    "rectangularSelection",
    "crosshairCursor",
    "highlightActiveLine",
    "keymap",
    "EditorState",
    "history",
    "defaultKeymap",
    "historyKeymap",
    "highlightSelectionMatches",
    "searchKeymap",
    "closeBrackets",
    "autocompletion",
    "closeBracketsKeymap",
    "completionKeymap",
    "foldGutter",
    "indentOnInput",
    "syntaxHighlighting",
    "defaultHighlightStyle",
    "bracketMatching",
    "foldKeymap",
    "lintKeymap",
    "basicSetup",
    "options",
    "keymaps",
    "push",
    "extensions",
    "allowMultipleSelections",
    "of",
    "fallback",
    "flat",
    "filter",
    "Boolean"
  ],
  "sources": [
    "../src/basicSetup.ts"
  ],
  "sourcesContent": [
    "import {\n  KeyBinding,\n  lineNumbers,\n  highlightActiveLineGutter,\n  highlightSpecialChars,\n  drawSelection,\n  dropCursor,\n  rectangularSelection,\n  crosshairCursor,\n  highlightActiveLine,\n  keymap,\n} from '@codemirror/view';\nimport { EditorState, Extension } from '@codemirror/state';\nimport { history, defaultKeymap, historyKeymap } from '@codemirror/commands';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { closeBrackets, autocompletion, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport {\n  foldGutter,\n  indentOnInput,\n  syntaxHighlighting,\n  defaultHighlightStyle,\n  bracketMatching,\n  foldKeymap,\n} from '@codemirror/language';\nimport { lintKeymap } from '@codemirror/lint';\n\nexport interface BasicSetupOptions {\n  lineNumbers?: boolean;\n  highlightActiveLineGutter?: boolean;\n  highlightSpecialChars?: boolean;\n  history?: boolean;\n  foldGutter?: boolean;\n  drawSelection?: boolean;\n  dropCursor?: boolean;\n  allowMultipleSelections?: boolean;\n  indentOnInput?: boolean;\n  syntaxHighlighting?: boolean;\n  bracketMatching?: boolean;\n  closeBrackets?: boolean;\n  autocompletion?: boolean;\n  rectangularSelection?: boolean;\n  crosshairCursor?: boolean;\n  highlightActiveLine?: boolean;\n  highlightSelectionMatches?: boolean;\n\n  closeBracketsKeymap?: boolean;\n  defaultKeymap?: boolean;\n  searchKeymap?: boolean;\n  historyKeymap?: boolean;\n  foldKeymap?: boolean;\n  completionKeymap?: boolean;\n  lintKeymap?: boolean;\n}\n\n/**\nThis is an extension value that just pulls together a number of\nextensions that you might want in a basic editor. It is meant as a\nconvenient helper to quickly set up CodeMirror without installing\nand importing a lot of separate packages.\n\nSpecifically, it includes...\n\n - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)\n - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)\n - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)\n - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)\n - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)\n - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)\n - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)\n - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\n - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)\n - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)\n - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)\n - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)\n - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)\n - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)\n - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)\n - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)\n - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)\n - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)\n - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)\n\n(You'll probably want to add some language package to your setup\ntoo.)\n\nThis extension does not allow customization. The idea is that,\nonce you decide you want to configure your editor more precisely,\nyou take this package's source (which is just a bunch of imports\nand an array literal), copy it into your own code, and adjust it\nas desired.\n*/\nexport const basicSetup = (options: BasicSetupOptions = {}): Extension[] => {\n  const keymaps: KeyBinding[][] = [];\n  if (options.closeBracketsKeymap !== false) {\n    keymaps.push([...closeBracketsKeymap]);\n  }\n  if (options.defaultKeymap !== false) {\n    keymaps.push([...defaultKeymap]);\n  }\n  if (options.searchKeymap !== false) {\n    keymaps.push([...searchKeymap]);\n  }\n  if (options.historyKeymap !== false) {\n    keymaps.push([...historyKeymap]);\n  }\n  if (options.foldKeymap !== false) {\n    keymaps.push([...foldKeymap]);\n  }\n  if (options.completionKeymap !== false) {\n    keymaps.push([...completionKeymap]);\n  }\n  if (options.lintKeymap !== false) {\n    keymaps.push([...lintKeymap]);\n  }\n  const extensions: Extension[] = [];\n  if (options.lineNumbers !== false) extensions.push(lineNumbers());\n  if (options.highlightActiveLineGutter !== false) extensions.push(highlightActiveLineGutter());\n  if (options.highlightSpecialChars !== false) extensions.push(highlightSpecialChars());\n  if (options.history !== false) extensions.push(history());\n  if (options.foldGutter !== false) extensions.push(foldGutter());\n  if (options.drawSelection !== false) extensions.push(drawSelection());\n  if (options.dropCursor !== false) extensions.push(dropCursor());\n  if (options.allowMultipleSelections !== false) extensions.push(EditorState.allowMultipleSelections.of(true));\n  if (options.indentOnInput !== false) extensions.push(indentOnInput());\n  if (options.syntaxHighlighting !== false)\n    extensions.push(syntaxHighlighting(defaultHighlightStyle, { fallback: true }));\n  if (options.bracketMatching !== false) extensions.push(bracketMatching());\n  if (options.closeBrackets !== false) extensions.push(closeBrackets());\n  if (options.autocompletion !== false) extensions.push(autocompletion());\n  if (options.rectangularSelection !== false) extensions.push(rectangularSelection());\n  if (options.crosshairCursor !== false) extensions.push(crosshairCursor());\n  if (options.highlightActiveLine !== false) extensions.push(highlightActiveLine());\n  if (options.highlightSelectionMatches !== false) extensions.push(highlightSelectionMatches());\n\n  return [...extensions, keymap.of(keymaps.flat())].filter(Boolean);\n};\n"
  ],
  "mappings": "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"
}